@using ProductCatalog.Application.Products.DTOs
@inject NavigationManager Navigation

<div class="card h-100">
    <div class="card-body">
        <h5 class="card-title">@Product.Name</h5>
        <p class="card-text">@Product.Description</p>
        <p class="card-text">
            <strong>価格:</strong> @Product.DisplayPrice<br/>
            <strong>在庫:</strong> @Product.Stock
        </p>
    </div>
    <div class="card-footer d-flex gap-2">
        <button class="btn btn-primary btn-sm" @onclick="ViewDetail">
            <i class="bi bi-eye"></i> 詳細
        </button>
        <button class="btn btn-outline-secondary btn-sm" @onclick="EditProduct">
            <i class="bi bi-pencil"></i> 編集
        </button>
        <button class="btn btn-danger btn-sm ms-auto" @onclick="HandleDelete">
            <i class="bi bi-trash"></i> 削除
        </button>
    </div>
</div>

@code {
    /// <summary>
    /// 商品データ（Dumb Component: 状態を持たず、入力のみ）
    /// </summary>
    [Parameter]
    public ProductDto Product { get; set; } = default!;

    /// <summary>
    /// 削除イベント（親コンポーネントに通知）
    /// </summary>
    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    private void ViewDetail()
    {
        Navigation.NavigateTo($"/products/{Product.Id}");
    }

    private void EditProduct()
    {
        Navigation.NavigateTo($"/products/{Product.Id}/edit");
    }

    private Task HandleDelete()
    {
        return OnDelete.InvokeAsync(Product.Id);
    }
}
