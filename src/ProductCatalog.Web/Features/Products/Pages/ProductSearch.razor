@page "/products/search"
@using ProductCatalog.Domain.Identity
@using ProductCatalog.Web.Features.Products.Store
@using ProductCatalog.Web.Features.Products.Actions
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = Roles.Admin)]
@inject ProductSearchStore Store
@inject ProductSearchActions Actions
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>商品検索</PageTitle>

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>商品検索</h1>
        <button class="btn btn-secondary" @onclick="BackToList">
            <i class="bi bi-arrow-left"></i> 戻る
        </button>
    </div>

    @if (!string.IsNullOrEmpty(State.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @State.ErrorMessage
        </div>
    }

    <!-- Search Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">検索条件</h5>
        </div>
        <div class="card-body">
            <EditForm Model="this" OnValidSubmit="HandleSearch">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="nameFilter" class="form-label">商品名</label>
                        <input id="nameFilter" class="form-control" type="text" @bind="nameFilter" placeholder="部分一致で検索" />
                    </div>

                    <div class="col-md-3">
                        <label for="minPrice" class="form-label">最低価格</label>
                        <div class="input-group">
                            <span class="input-group-text">¥</span>
                            <input id="minPrice" class="form-control" type="number" step="0.01" @bind="minPrice" placeholder="0" />
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label for="maxPrice" class="form-label">最高価格</label>
                        <div class="input-group">
                            <span class="input-group-text">¥</span>
                            <input id="maxPrice" class="form-control" type="number" step="0.01" @bind="maxPrice" placeholder="999999" />
                        </div>
                    </div>

                    <div class="col-md-4">
                        <label for="status" class="form-label">ステータス</label>
                        <select id="status" class="form-select" @bind="status">
                            <option value="">すべて</option>
                            <option value="0">下書き</option>
                            <option value="1">公開中</option>
                            <option value="2">アーカイブ済み</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="orderBy" class="form-label">並び順</label>
                        <select id="orderBy" class="form-select" @bind="orderBy">
                            <option value="Name">商品名</option>
                            <option value="Price">価格</option>
                            <option value="Stock">在庫数</option>
                            <option value="Status">ステータス</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="isDescending" class="form-label">順序</label>
                        <select id="isDescending" class="form-select" @bind="isDescending">
                            <option value="false">昇順</option>
                            <option value="true">降順</option>
                        </select>
                    </div>
                </div>

                <div class="d-grid gap-2 mt-3">
                    <button type="submit" class="btn btn-primary" disabled="@State.IsSearching">
                        @if (State.IsSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <text>検索中...</text>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                            <text>検索</text>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Search Results -->
    @if (State.SearchResult != null)
    {
        var result = State.SearchResult;

        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">検索結果</h5>
                <span class="badge bg-primary">@result.TotalCount 件</span>
            </div>
            <div class="card-body">
                @if (result.Items.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>商品名</th>
                                    <th>説明</th>
                                    <th class="text-end">価格</th>
                                    <th class="text-end">在庫</th>
                                    <th class="text-center">操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in result.Items)
                                {
                                    <tr>
                                        <td>@product.Name</td>
                                        <td>@product.Description</td>
                                        <td class="text-end">¥@product.Price.ToString("N0")</td>
                                        <td class="text-end">
                                            <span class="badge @(product.Stock > 0 ? "bg-success" : "bg-danger")">
                                                @product.Stock 個
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDetail(product.Id)">
                                                <i class="bi bi-eye"></i> 詳細
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    @if (result.TotalPages > 1)
                    {
                        <nav aria-label="検索結果ページネーション">
                            <ul class="pagination justify-content-center mb-0">
                                <li class="page-item @(result.CurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(result.CurrentPage - 1)" disabled="@(result.CurrentPage == 1)">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </li>

                                @for (int i = 1; i <= result.TotalPages; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(result.CurrentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">
                                            @pageNumber
                                        </button>
                                    </li>
                                }

                                <li class="page-item @(result.CurrentPage == result.TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(result.CurrentPage + 1)" disabled="@(result.CurrentPage == result.TotalPages)">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="alert alert-info mb-0" role="alert">
                        <i class="bi bi-info-circle me-2"></i>検索条件に一致する商品が見つかりませんでした
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private ProductSearchState State => Store.GetState();

    private string? nameFilter;
    private decimal? minPrice;
    private decimal? maxPrice;
    private string? status;
    private string orderBy = "Name";
    private bool isDescending = false;

    protected override async Task OnInitializedAsync()
    {
        Store.OnChangeAsync += HandleStateChanged;

        // 初回検索を実行
        await Actions.SearchAsync(
            nameFilter: null,
            minPrice: null,
            maxPrice: null,
            status: null,
            page: 1,
            pageSize: 10,
            orderBy: "Name",
            isDescending: false);
    }

    private Task HandleStateChanged()
    {
        return InvokeAsync(StateHasChanged);
    }

    private async Task HandleSearch()
    {
        int? statusValue = null;
        if (!string.IsNullOrWhiteSpace(status))
        {
            statusValue = int.Parse(status);
        }

        await Actions.SearchAsync(
            nameFilter: string.IsNullOrWhiteSpace(nameFilter) ? null : nameFilter,
            minPrice: minPrice,
            maxPrice: maxPrice,
            status: statusValue,
            page: 1,
            pageSize: 10,
            orderBy: orderBy,
            isDescending: isDescending);
    }

    private async Task GoToPage(int page)
    {
        int? statusValue = null;
        if (!string.IsNullOrWhiteSpace(status))
        {
            statusValue = int.Parse(status);
        }

        await Actions.SearchAsync(
            nameFilter: string.IsNullOrWhiteSpace(nameFilter) ? null : nameFilter,
            minPrice: minPrice,
            maxPrice: maxPrice,
            status: statusValue,
            page: page,
            pageSize: 10,
            orderBy: orderBy,
            isDescending: isDescending);
    }

    private void ViewDetail(Guid productId)
    {
        Navigation.NavigateTo($"/products/{productId}");
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/products");
    }

    public void Dispose()
    {
        Store.OnChangeAsync -= HandleStateChanged;
    }
}
