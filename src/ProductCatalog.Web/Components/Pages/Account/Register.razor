@page "/Account/Register"
@using Microsoft.AspNetCore.Identity
@using ProductCatalog.Domain.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>アカウント登録</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>アカウント登録</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@Input" OnValidSubmit="OnValidSubmitAsync" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessage
                            </div>
                        }

                        @if (RegistrationSucceeded)
                        {
                            <div class="alert alert-success" role="alert">
                                アカウントが作成されました。ログインページにリダイレクトします...
                            </div>
                        }

                        <div class="mb-3">
                            <label for="displayName" class="form-label">表示名</label>
                            <InputText id="displayName" @bind-Value="Input.DisplayName" class="form-control" />
                            <ValidationMessage For="() => Input.DisplayName" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">メールアドレス</label>
                            <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" />
                            <ValidationMessage For="() => Input.Email" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">パスワード</label>
                            <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" />
                            <ValidationMessage For="() => Input.Password" />
                            <small class="form-text text-muted">
                                パスワードは8文字以上で、大文字・小文字・数字・記号を含む必要があります。
                            </small>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">パスワード（確認）</label>
                            <InputText id="confirmPassword" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" />
                            <ValidationMessage For="() => Input.ConfirmPassword" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@RegistrationSucceeded">登録</button>
                    </EditForm>

                    <hr />
                    <p class="text-center">
                        <a href="/Account/Login">既にアカウントをお持ちの方はこちら</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private RegisterInputModel Input { get; set; } = new();

    private string? ErrorMessage { get; set; }
    private bool RegistrationSucceeded { get; set; }

    private async Task OnValidSubmitAsync()
    {
        var user = new ApplicationUser
        {
            UserName = Input.Email,
            Email = Input.Email,
            DisplayName = Input.DisplayName,
            CreatedAtUtc = DateTime.UtcNow,
            IsActive = true
        };

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            RegistrationSucceeded = true;
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/Account/Login");
        }
        else
        {
            ErrorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

    private sealed class RegisterInputModel
    {
        [Required(ErrorMessage = "表示名は必須です")]
        [StringLength(100, ErrorMessage = "表示名は{1}文字以内で入力してください")]
        public string DisplayName { get; set; } = string.Empty;

        [Required(ErrorMessage = "メールアドレスは必須です")]
        [EmailAddress(ErrorMessage = "有効なメールアドレスを入力してください")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "パスワードは必須です")]
        [StringLength(100, ErrorMessage = "パスワードは{2}文字以上{1}文字以内で入力してください", MinimumLength = 8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "パスワード（確認）は必須です")]
        [Compare(nameof(Password), ErrorMessage = "パスワードが一致しません")]
        [DataType(DataType.Password)]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
